library(tidyverse)

#Her lærer jeg at lave digitale objekter, juhu
area_hectares <- 1.0
area_hectares * 2.47

area_hectares <- 2.5
area_hectares * 2.47



area_acres <- area_hectares * 2.47

#Jeg slettede noget, fordi jeg troede jeg ikke skulle bruge dette script til noget


#################################################################
#Functions
#Args er smart til at se hvordan man skal udfylde funktionen
args(round)
#function (x, digits = 0) 
#  NULL
#To måder at skrive round funktionen på
round(3.13159, 2)
#Den hernedenunder gør det muligt at ændre på rækkefølgen
round(x = 3.14159, digits = 2)


########################################################
#Vektorer og data typer

hh_members <- c(1,3,7,4,2,9,5)
wall_types <- c("sunbrick","mudbrick","muddaub")

class(hh_members)
str(hh_members)

#Modificereing af vektorer
possesions <- c("bicycle","radio","television")
possesions <- c(possesions,"mobile_phone")
possesions
possesions <- c("cat",possesions)
possesions

#Logiske vektorer
hh_members > interviews <- read_csv("data/SAFI_clean.csv", na = "NULL")


##########################################################
#Learninng dplyr and tidyr

interviews <- read_csv("~/R øvelser/data/SAFI_clean.csv", na = "NULL")
interviews

view(interviews)

#man kan subsette kolonner med select
select(interviews, no_membrs, months_lack_food)

#man kan se kolonnerne sådan her
view(select(interviews, no_membrs, months_lack_food))

filter(interviews, village == "Chirodzo")

filter(interviews, village == "Chirodzo", rooms > 1, no_meals > 2)
view(filter(interviews, village == "Chirodzo", rooms > 1, no_meals > 2))

#pipes
interviews %>% 
  filter(village == "Chirodzo") %>% 
  select(village:respondent_wall_type)

interviews_god <- interviews %>% 
  filter(village == "Chirodzo") %>% 
  select(village:respondent_wall_type)

interviews_memb_assoc <- interviews %>% 
  filter(memb_assoc == "yes") %>% 
  select(affect_conflicts,liv_count,no_meals)

view(interviews_memb_assoc)

#mutate
interviews %>%
  mutate(people_per_room = no_membrs / rooms) %>% 
  select(no_membrs,rooms,people_per_room)

interviews %>%
  filter(!is.na(memb_assoc)) %>%
  mutate(people_per_room = no_membrs / rooms) %>% 
  select(no_membrs,rooms,people_per_room) %>% 
  view

#øvelse
interviews %>% 
  mutate(total_meals = no_membrs*no_meals) %>% 
  filter(total_meals > 20) %>% 
  select(village,total_meals)

#split-apply-combine data analysis and summariz() function
#group and sumarize by mean
interviews %>%
  group_by(village) %>%
  summarize(mean_no_membrs = mean(no_membrs))

#group more than one coloumn
interviews %>%
  group_by(village, memb_assoc) %>%
  summarize(mean_no_membrs = mean(no_membrs)) %>% 
  ungroup()

#filter NA away
interviews %>%
  filter(!is.na(memb_assoc)) %>%
  group_by(village, memb_assoc) %>%
  summarize(mean_no_membrs = mean(no_membrs))

#Sumarize by both mean and min
interviews %>%
  filter(!is.na(memb_assoc)) %>%
  group_by(village, memb_assoc) %>%
  summarize(mean_no_membrs = mean(no_membrs),
            min_membrs = min(no_membrs))

#arrange() (sort) by min_members
interviews %>%
  filter(!is.na(memb_assoc)) %>%
  group_by(village, memb_assoc) %>%
  summarize(mean_no_membrs = mean(no_membrs),min_membrs = min(no_membrs)) %>%
  arrange(min_membrs)

#arrange by desc()
interviews %>%
  filter(!is.na(memb_assoc)) %>%
  group_by(village, memb_assoc) %>%
  summarize(mean_no_membrs = mean(no_membrs),min_membrs = min(no_membrs)) %>%
  arrange(desc(min_membrs))

#count
interviews %>%
  count(village)

#count and sort by size from highest to low
interviews %>%
  count(village, sort = TRUE)

#exercise
#1 number of two and three meals pr day
interviews %>%
  count(no_meals, sort = TRUE)
#2 mean, min, max and number of observations
interviews %>%
  group_by(village) %>%
  summarize(
    mean_no_membrs = mean(no_membrs),
    min_no_membrs = min(no_membrs),
    max_no_membrs = max(no_membrs),
    n = n()
  )

#3 largest household in each month
library(lubridate)

interviews %>%
  mutate(month = month(interview_date),
         day = day(interview_date),
         year = year(interview_date)) %>%
  group_by(year, month) %>%
  summarize(max_no_membrs = max(no_membrs))

  
#####################################################

#Pivoting wide and long

#pivoting wide
interviews_wide <- interviews %>% 
  mutate(wall_type_logical = TRUE) %>% 
  pivot_wider(names_from = respondent_wall_type,
              values_from = wall_type_logical,
              values_fill = list(wall_type_logical = FALSE)) %>% 
  select(burntbricks,cement,muddaub,sunbricks)

#pivoting long (reverse of process above)
interviews_long <- interviews_wide %>%
  pivot_longer(cols = c(burntbricks, cement, muddaub, sunbricks),
               names_to = "respondent_wall_type", 
               values_to = "wall_type_logical") %>%
  filter(wall_type_logical) %>%
  select(-wall_type_logical)

#cleaning data with pivot_wider
interviews_items_owned <- interviews %>% 
  separate_rows(items_owned, sep = ";") %>%
  replace_na(list(items_owned = "no_listed_items")) %>%
  mutate(items_owned_logical = TRUE) %>%
  pivot_wider(names_from = items_owned, 
              values_from = items_owned_logical, 
              values_fill = list(items_owned_logical = FALSE))

#how many had the different items
interviews_items_owned %>%
  filter(bicycle) %>%
  group_by(village) %>%
  count(bicycle)

#average number of items owned
interviews_items_owned %>%
  mutate(number_items = rowSums(select(., bicycle:car))) %>%
  group_by(village) %>%
  summarize(mean_items = mean(number_items))

#exercises
#1
interviews_months_lack_food <- interviews %>% 
  separate_rows(months_lack_food, sep = ";") %>% 
  mutate(no_food_logical = TRUE) %>% 
  pivot_wider(names_from = months_lack_food,
              values_from = no_food_logical,
              values_fill = list(no_food_logical = FALSE))

#2
interviews_months_lack_food %>% 
  mutate(number_months = rowSums(select(., Jan:May))) %>% 
  group_by(memb_assoc) %>% 
  summarize(mean_months_no_food = mean(number_months))

#################################################
#Exporting data (making dataframe to export first)

interviews_plotting <- interviews %>%
  ## pivot wider by items_owned
  separate_rows(items_owned, sep = ";") %>%
  ## if there were no items listed, changing NA to no_listed_items
  replace_na(list(items_owned = "no_listed_items")) %>%
  mutate(items_owned_logical = TRUE) %>%
  pivot_wider(names_from = items_owned, 
              values_from = items_owned_logical, 
              values_fill = list(items_owned_logical = FALSE)) %>%
  ## pivot wider by months_lack_food
  separate_rows(months_lack_food, sep = ";") %>%
  mutate(months_lack_food_logical = TRUE) %>%
  pivot_wider(names_from = months_lack_food, 
              values_from = months_lack_food_logical, 
              values_fill = list(months_lack_food_logical = FALSE)) %>%
  ## add some summary columns
  mutate(number_months_lack_food = rowSums(select(., Jan:May))) %>%
  mutate(number_items = rowSums(select(., bicycle:car)))

#write the csv
write_csv(interviews_plotting, path = "data_output/interviews_plotting.csv")


############################################################################################
############################################################################################
#Datavisualisation with ggplot2

library(tidyverse)

interviews_plotting <- read_csv("data_output/interviews_plotting.csv")

#dot(eller scatter?) plot
interviews_plotting %>%
  ggplot(aes(x = no_membrs, y = number_items)) + 
  geom_point()

##Man kan gemme et ggplot som digitalt objekt, for at man kan prøve forskellige plottyper af på det
# Assign plot to a variable
interviews_plot <- interviews_plotting %>%
  ggplot(aes(x = no_membrs, y = number_items))

# Draw the plot as a dot plot
interviews_plot +
  geom_point()

#Transparecy to avoid overplotting
interviews_plot +
  geom_point(alpha = 0.5)

#jittering to avoid overplotting
interviews_plot +
  geom_jitter(alpha = 0.5,
              width = 0.4,
              height = 0.4)

#including colour
interviews_plot +
  geom_jitter(alpha = 0.5,
              colour = "blue",
              width = 0.4,
              height = 0.4)

#dem ovenover er bare forkortelser, fordi jeg har gemt interviews_plot - dette er det samme som den ovenstående f.eks.
interviews_plotting %>%
  ggplot(aes(x = no_membrs, y = number_items)) +
  geom_jitter(alpha = 0.5,
              colour = "blue",
              width = 0.4,
              height = 0.4)

#fremover skriver jeg det fuldt ud uden at bruge genvejen, bare for at have formlerne


interviews_plotting %>%
  ggplot(aes(x = no_membrs, y = number_items)) + 
  geom_point()


#different colours for each village
interviews_plotting %>%
  ggplot(aes(x = no_membrs, y = number_items)) +
  geom_jitter(aes(color = village), 
              alpha = 0.5, 
              width = 0.2, 
              height = 0.2)

#different sizes for each point
interviews_plotting %>% 
  ggplot(aes(x = no_membrs, y = number_items, color = village)) +
  geom_count()

#exercise
interviews_plotting %>%
  ggplot(aes(x = village, y = rooms)) +
  geom_jitter(aes(color = respondent_wall_type),
              alpha = 0.5,
              width = 0.2,
              height = 0.2)

#boxplot
interviews_plotting %>%
  ggplot(aes(x = respondent_wall_type, y = rooms)) +
  geom_boxplot()

#scatterplot in front of boxplot
interviews_plotting %>%
  ggplot(aes(x = respondent_wall_type, y = rooms)) +
  geom_boxplot(alpha = 0) +
  geom_jitter(alpha = 0.5,
              color = "tomato",
              width = 0.2,
              height = 0.2)

#violinplot (like boxplot, but shows if the distribution is bimodal (two highpoints))
interviews_plotting %>%
  ggplot(aes(x = respondent_wall_type, y = rooms)) +
  geom_violin()

#scatterplot in front of violinplot
interviews_plotting %>%
  ggplot(aes(x = respondent_wall_type, y = rooms)) +
  geom_violin(alpha = 0) +
  geom_jitter(alpha = 0.5,
              color = "tomato",
              width = 0.2,
              height = 0.2)
#exercise
#1 (not the viloin plot, but the one after)
interviews_plotting %>%
  ggplot(aes(x = respondent_wall_type, y = liv_count)) +
  geom_boxplot(alpha = 0) + 
  geom_jitter(alpha = 0.5,
              color = "tomato",
              width = 0.2,
              height = 0.2)
#2
interviews_plotting %>%
  ggplot(aes(x = respondent_wall_type, y = liv_count)) +
  geom_boxplot(alpha = 0) + 
  geom_jitter(alpha = 0.5,
              aes(color = memb_assoc),
              width = 0.2,
              height = 0.2)

#barplot
interviews_plotting %>%
  ggplot(aes(x = respondent_wall_type)) +
  geom_bar()

#stacked bar-chart
interviews_plotting %>%
  ggplot(aes(x = respondent_wall_type)) +
  geom_bar(aes(fill = village))

#side by side bar-chart (often more easy to read)
interviews_plotting %>%
  ggplot(aes(x = respondent_wall_type)) +
  geom_bar(aes(fill = village), position = "dodge")

#compare proportions - new dataframe 'percent' (cement removed) - percent represents the percent of each housetype in each village
percent_wall_type <- interviews_plotting %>%
  filter(respondent_wall_type != "cement") %>%        ##Removes the cement-house, because there is only one
  count(village, respondent_wall_type) %>%            ##counts and make a coloumn with n = number of houses with the coresponding type of wall type in the said village
  group_by(village) %>%                                ##Make village-type split up for each wall-type
  mutate(percent = (n / sum(n)) * 100) %>%            ##Makes a new coloumn with the percentage of the villages houses is made of the said wall-type
  ungroup()

#compare proportions - bar_plot
percent_wall_type %>%
  ggplot(aes(x = village, y = percent, fill = respondent_wall_type)) +
  geom_bar(stat = "identity", position = "dodge")

#exercise
percent_memb_assoc <- interviews_plotting %>%
  filter(memb_assoc != "NA") %>%                   ##This worked, but the solution is: filter(!is.na(memb_assoc)) %>%
  count(village, memb_assoc) %>%           
  group_by(village) %>%                              
  mutate(percent = (n / sum(n)) * 100) %>%         
  ungroup()

percent_memb_assoc %>%
  ggplot(aes(x = village, y = percent, fill = memb_assoc)) +
  geom_bar(stat = "identity", position = "dodge")


#############################################

#adding labels and titles and facetting


#adding labels using labs() command, with title, x, and y
percent_wall_type %>%
  ggplot(aes(x = village, y = percent, fill = respondent_wall_type)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Proportion of wall type by village",
       x = "Village",
       y = "Percent")

#faceting witth facet_wrap()
percent_wall_type %>%
  ggplot(aes(x = respondent_wall_type, y = percent)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title="Proportion of wall type by village",
       x="Wall Type",
       y="Percent") +
  facet_wrap(~ village)

#using theme() to make the plot more readable
percent_wall_type %>%
  ggplot(aes(x = respondent_wall_type, y = percent)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title="Proportion of wall type by village",
       x="Wall Type",
       y="Percent") +
  facet_wrap(~ village) +
  theme_bw() +
  theme(panel.grid = element_blank())

#making a seperate plot for ownerage of each item in the different villages
##first: a new dataframe with how many items are owned in the villages compared with the number of people
percent_items <- interviews_plotting %>%
  pivot_longer(cols = bicycle:no_listed_items, names_to = "items", 
               values_to = "items_owned_logical") %>%
  filter(items_owned_logical) %>%
  count(items, village) %>%
  ## add a column with the number of people in each village
  mutate(people_in_village = case_when(village == "Chirodzo" ~ 39,
                                       village == "God" ~ 43,
                                       village == "Ruaca" ~ 49)) %>%
  mutate(percent = (n / people_in_village) * 100)

##Plot
percent_items %>%
  ggplot(aes(x = village, y = percent)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ items) +
  theme_bw() +
  theme(panel.grid = element_blank())

##Minimal theme instead of bw
percent_items %>%
  ggplot(aes(x = village, y = percent)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ items) +
  theme_minimal() +
  theme(panel.grid = element_blank())

##Light theme
percent_items %>%
  ggplot(aes(x = village, y = percent)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ items) +
  theme_light() +
  theme(panel.grid = element_blank())

##Giving axes meaningfull titles
percent_items %>%
  ggplot(aes(x = village, y = percent)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ items) +
  labs(title = "Percent of respondents in each village who owned each item",
       x = "Village",
       y = "Percent of Respondents") +
  theme_bw()

##Changing font size
percent_items %>%
  ggplot(aes(x = village, y = percent)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ items) +
  labs(title = "Percent of respondents in each village who owned each item",
       x = "Village",
       y = "Percent of Respondents") +
  theme_bw() +
  theme(text = element_text(size = 16))

##tilting x-axis labels + \n in title to add newline
percent_items %>%
  ggplot(aes(x = village, y = percent)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ items) +
  labs(title = "Percent of respondents in each village \n who owned each item",
       x = "Village",
       y = "Percent of Respondents") +
  theme_bw() +
  theme(axis.text.x = element_text(colour = "grey20", size = 12, angle = 45,
                                   hjust = 0.5, vjust = 0.5),
        axis.text.y = element_text(colour = "grey20", size = 12),
        text = element_text(size = 16))

#exercise
#i use the violinplot from before - this time: funky yellow purple edition
interviews_plotting %>%
  ggplot(aes(x = respondent_wall_type, y = rooms)) +
  geom_violin(fill = "yellow", colour = "purple") +
  labs(title = "Number of rooms depending on wall type",
       x = "Wall type",
       y = "Number of rooms") +
  theme(axis.text.x = element_text(colour = "purple", size = 20, angle = 20,
                                   hjust = 0.5, vjust = 0.5),
        axis.text.y = element_text(colour = "purple", size = 20),
        text = element_text(size = 16))

#############################################################################


#Export plot

#USE ggsave() !!!!
my_plot <- percent_items %>%
  ggplot(aes(x = village, y = percent)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ items) +
  labs(title = "Percent of respondents in each village \n who owned each item",
       x = "Village",
       y = "Percent of Respondents") +
  theme_bw() +
  theme(axis.text.x = element_text(color = "grey20", size = 12, angle = 45,
                                   hjust = 0.5, vjust = 0.5),
        axis.text.y = element_text(color = "grey20", size = 12),
        text = element_text(size = 16),
        plot.title = element_text(hjust = 0.5))

ggsave("fig_output/name_of_file.png", my_plot, width = 15, height = 10)
